CSS Review
----------
CSS -> Cascading Style Sheets, separate content from presentation
inline > internal > external
SCSS/SASS are most widely used CSS pre-processors
Bootstrap -> most popular frontend framework on the web

UI -> user interface
Responsive -> looks good across diff. screen sizes
Breakpoints -> markes at which a change will occur to improve UI
media queries -> used for device-specific breakpoints
Ex. @media only screen
and (min-device-width: 320px)
and (max-device-width: 480px){
  font-size: 12px;
}

Pixel perfect -> replicating a mockup perfectly
flat design -> minimalist UI design language characterized by simple elements
Skeuomorphism -> characterized by elements that look like counterparts in real world
Grid system -> simple CSS framework that provides column systems for grid layouts
Material design -> Google's visual language
Material UI -> react components implementation of google's design language
W3C -> group responsibl efor HTML and CSS standards

Media queries -> device screen width, orientation, pixel density, etc
min-width is used often, so is max-width

Rely on breakpoints that matter for your layout! Resize down and see when
it starts to look bad/weird!

Mobile-first design, why?
1. Restyling responsiblity on larger devices w/ mroe computing mroe
2. Adding styles instead of overwriting them

Viewpoint to enable responsive layout, otherwise the display width will be
automatically set to be way diferent.
<meta name="viewport" content="width=device-width, initial-scale=1" />

SASS -> Break things up then import from different files!
Variables, nesting styles, etc.
base -> colors, fonts, grid, layout, reset
In application.scss, import scss pages and get rid of '**require_tree'
Break up all styles into components!

Specificity Selectors
* -> Tag -> Class -> ID -> Inline -> !important
Notice how it chooses from the closest container first, and if not found,
it'll choose the parent container.

Block -> respect width/height, take 100% of parent element
Inline -> do not respect width/height, large as largest descendent
Inline-block -> respect width/height, large as largest descendant

Contnet Box -> size includes only content
Border Box -> includes content, padding, and border

Float -> placed left/right side, text/inline wrap around, element is taken from
the normal web page flow

.clearfix:after {
	content: "";
	display: block;
	clear: both;
}

Flexbox -> easily layout, align, and distribute space among items in a container
container alters its items to best fill its space
A Complete Guide to Flexbox!

Grid -> please use with float or flex!
Huh, you can have more than one display type per element...
Rather than making a custom grid system, can probably use CSS's new built-in...

Position -> static, relative,fixed, absolute
--------------------------------------------------
Static -> default, sit in flwo of document, can't modify position by
using left/to[/bottom/right relative

Relative -> occupies space in flow of page, relative to normal position,
can reposition using left/top/etc

Fixed -> relative to viewport, stays in same place (not affected by scrolling),
taken out of the flow aka no space, adjust location by using left/top/etc

Absolute -> positioned with respect to its most recent non-statically
positioned ancestor, can adjust

Can do relative -> absolute -> flex -> flex-direction column to make dropdown

What about if you want a header that's always on the page? Fixed nav!
position -> fixed, top -> 0 (stick to top of the viewport)
--------------------------------------------------------------
Learning Goals for the CSS Course
How to use the browser inspector for CSS/HTML
Semantic HTML
Classes/ids
CSS selector precedence
Default browser styles
Box model (margin, border, padding, width/height)
Display block and inline
Document flow
Floating and clearing
Pseudo content (:after/:before)
Clearfix (use .group)
Positioning (static, relative, absolute, fixed)
Pseudo classes (:hover/:active/:focus)
Box sizing (change the way the box model is calculated)

Everything is rectangles!
Common display values: none, block, inline, inline-block
Several more types such as table and flex

Inline -> cannot contain block elements, follow text flows, minimal height/width,
cannot manually set height/width, padding/margin only work left/right

Change box-sizing property to border-box

Margin -> private space, not part of element,can be set to auto to distribute
left/right, can be negative
Weird: push thru top/bottom of ay direct ancestors that do not have border/padding
Margin collapses, always see through

Inherit -> take property value from its parent element
Makes sense on font, color, text-align, etc
Does not make sense on background, margin, padding, border...

CSS reset -> browsers aka user agents have internal stylesheet, sensible defaults
html, body, section, article,
Ex.
h1, h2, p, strong, em, a {
  margin: 0;
  border: 0;
  padding: 0;
  outline: 0;
  box-sizing: inherit;
  font: inherit;
  text-decoration: inherit;
  text-align: inherit;
  color: inherit;
  background: transparent;
}

Pseudo-content -> content: "whatever", used to inject content inside an
element. Can inject after or before using :after, :before
Acts as inline by default, can take any styling, needs a declared content
property, content property can be a string or select an element's attribute

Float -> floats an element to left/right side of parent container, used to
align block elements next to each other, shows up at expected position,
takes up minimal vertical/horizontal to accomodate content
Doesn't stretch height of parent container-- sticks out instead!
All content that follows wraps/flows around, unless cleared
To tell cannot wrap around floated element, define "clear", aka refuse to wrap
and show below floated element

Clearfix -> parent element extend to full height of all floated elements inside it
Injects empty block pseudo element inside w/ clear property, put after float element!

Grid!
https://learncssgrid.com/
https://cssgridgarden.com/

list-style types! Can set to none to get rid of...
https://www.w3.org/TR/CSS21/propidx.html

https://developer.mozilla.org/en-US/docs/Glossary/Semantics

Display: block and put in padding!
Making a nav bar with float is really easy, but with flexbox or grid it's
even easier and cleaner.
Margin -> space outside element, Padding -> space inside element

Links and pictures are inline elements by default!
img reset -> display block, width 100%, height: auto;

Remember that relative takes space, but absolute doesn't!
Static/Relative -> Take up space
Fixed/Absolute -> doesn't take up space
Static -> Can't be moved with left/right/etc
Relative/Fixed/Absolute -> can be moved

Create a coordinate system!
use relative to make coordinate system -> absolute to place, relative to
whaat you put as position:relative and won't move as you change size of page

How to layer image over another image?
image -> absolute, transform -> rotate, opacity, etc, do whatever!
Transition is really cool too! Ie. transition: opacity 1s;
transition: top 1s, transform 1s
https://developer.mozilla.org/en-US/docs/Web/CSS/Reference

Ex. ending result here, starting result in .img-glasses and such
figure:hover .img-glasses {
	display:block;
}
Think about how the above works.

https://css-tricks.com/almanac/properties/t/transform/
Transform property is really cool and has hella functions

Redid: Flexbox Froggy, Flexbox Defense, Grid Garden

grid-area and grid-template, remember span!
grid-area: / / / /, grid-template: /
(grs / gcs / gre / gce), (gtr gtc)
All direct children of grid containers become grid items
grid or inline-grid
grid-template (combine grid rows / grid columns)
minmax() function -> accepts 2 arg, min and max size
auto -> grow/stretch based on size of content
50% will mean no mroe than 50% of grid container width
repeat(nbr repeats, whatever) useful for repeating
Gutters -> aka grid-gap (grid-row-gap grid-column-gap) -> space
between rows and columns, not along edge of container
grid-area (grid row start grid col start grid row end grid col end)
span to say how many elements to go across

Naming grid lines -> when using grid template, put the name in brackets
b4 size like so [name] can make multiple names per by [name1 name2]
After naming, can use grid-area: name 1 /name 2/ name 3/ name 4

W/ grid-template-areas, can name entire areas instead!

grid-auto-(rows columns flow) etc decides direction and size in implicit grid

grid area or grid lines implicitly named depending on which you do!

Can layer/stack grid items by properly positioning and assigning z-index
Hmm, can make a peel away page pretty easily with this! By changing z-index
w/ transitions... Can easily place a grid item on top of another!

justify-items, justify-self align items along row axis
align-items, align-self align items along the column axis
(use on container) (use on self)
items: accepts auto/normal/start/end/center/stretch/baseline/first baseline/last baseline
self: same as items above

align-content and justify-content accept:
normal/start/end/center/stretch/space-around/space-between/space-evenly/baseline/
first baseline/last baseline
moves all content!

https://css-tricks.com/snippets/css/complete-guide-grid/
Note grid-auto-flow, the dense part. row and col dense, where it decides how to
fill in holes earlier if smaller items come up later
Damn, grid is shorthand for everything

px, em, rem, %, fr, etc...fractional units,
min-content, max-content, minmax(), repeat, auto-fill, etc

rem -> root em -> em unit relative to font-size of parent, relative to
the root or html element.
Use rem if possible!
Set default font-size to 62.5%, thus making everything scale w/ different
screen sizes. (People use 62.5 instead of 100% to make the calculation easier)
(62.5% of 16 px is 10px, meaning 1rem = 10px)

rem for spacing + font sizing, em for layouts like menu!
Why em? (You actually want nested font percentages!)
https://medium.com/code-better/css-units-for-font-size-px-em-rem-79f7e592bb97

Remember order that CSS style sheets are loaded
url(../folder/file) no ""!

  .hamburger-dropdown > li {
    background-image: url(../assets/hamburger.png);
    background-size: 50px 50px;
    width: 50px;
    height: 50px;
  }

  Notice how painful it is to spot a miswritten class tag!
  Also, notice how you couldn't really see the problem with background-image!
  If it's too large, doesn't seem to show up anywhere. Only after using
  background-size tag did things work out.

Is the left:0 really necessary, since it's automatically 0?

display
margin/padding
border
width
font-family
font-size
font-weight
color
background
float
(I'd personally prefer to practice using grid, but I guess they want
us to simply use floats/clearfix/grid system to do the layout)
margin: auto -> spaces out margin on left/right side of element

Odd glitch? Nothing was showing up... I wonder why, until I put in
height and removed it.

Used border-sizing: border-box rather than just calculate paddings and such
for css review exercise.

http://validator.w3.org/ -> Validates HTML and checks for errors
Descriptive classes, all lowercase with dashes
Double quote attributes, aka ""
Keep selectors as shallow as possible
Never use IDs as selectors

PerfectPixel tool!

Common gotchas: when using absolute position, know what coordinate system you're
working in! Relative!
Pseudo-content is injected inside the selected element as an inline element
If rules look correct but not showing up, pull up browser inspector to see conflicting rules

Reset / Appearance / Box-model / Box-sizing / Cursor

appearance property is used to display an element using a platform-native styling
based on the users' operating system's theme. Can use to apply platform
specific styling to an element that doesn't have, or remove platform specific styling.
Ie. -webkit-appearance: none;
https://css-tricks.com/almanac/properties/a/appearance/

Font downloading for cooler fonts introduced in CSS3 fonts module
font-weight from 100 to 900, with 400 being normal. Some common fonts
don't have any weights besides 400 and 700

https://css-tricks.com/snippets/css/a-guide-to-flexbox/
https://css-tricks.com/almanac/properties/b/border/
https://developer.mozilla.org/en-US/docs/Web/HTML/Element

Remember -> least specific tag possible to apply styling!

Be able to reason about styling approaches from screenshots of a design
Be able to layout elements in a custom Grid system
Know how to create interactive elements such as sidebars and dropdowns
Understand media queries and responsive design
Know how to use an icon font system
Know how to organize stylesheets in a Rails Application

https://mattbrictson.com/lightning-fast-sass-reloading-in-rails
bundle exec guard -P livereload
Easy to setup workflow using style injection, see styling changes immediately
after authoring them without having to refresh
"Use guard-livereload with rack-livereload to automatically push new styles to the browser
Make sure your Guardfile enables style injection by using the right regular expressions
Embrace the Sprockets //= require directive (yes, even in SCSS)
Be conscious of your @import statements and use them sparingly"
Compass or Bourbon frameworks for quicker CSS

base -> hold styles that apply to app globally
components -> styles for specific components
Think about how naming should be in HTML in this case.

Use SCSS variables when defining font or color values
https://github.com/rails/sass-rails#features

Rails Asset Pipeline and navigating file structure
HTML, CSS, or both
docs -> screenshots and copy, images for mockups and text for app's content
HTML rendered using rails partials in app/views/static_pages/index.html.erb
Images used to style app in app/assets/images
JS files in app/assets/javascripts
Script tag in application.html.erb loads Font Awesome's icon classes

Reset -> Layout -> Header -> Main Nav -> Masthead -> Sections Nav -> Gear Dropdown
-> Main Content -> Custom Flexible Grid(or use just Grid) -> News Content
-> Sections Sidebar -> Search Modal -> Fixed Header

<i> </i> tag for alternate voice or mood in text, usually Italics
span tag for grouping/applying styles to inline elements
https://fontawesome.com/icons?d=gallery -> Pretty cool! For using icons...

Notice how everything is named by class in components to prevent tag
mixups.

https://apidock.com/ruby/DateTime/strftime
strftime is rly useful! Finally...

Hmm, float and clearfix result in some wacky errors
if all the elements inside the container aren't floated.
Should have used flexbox instead of grid system here...

Hmm.. learned a lot about CSS here. More particularly-- think about where you'd
put margins/paddings beforehand. Ie. where should there be a space, logically?
Margins are a bit easier because it collapses, paddings are important for buttons
and such for clicking, however. Notice how you did a "hack" near the end-- by
just putting margin-bottom on the picture. Think about if there were a random
number of articles-- how would you handle that and where should margins/paddings
always be?

You're kinda just throwing out random tags to get what you want, and being
extremely unorganized.
